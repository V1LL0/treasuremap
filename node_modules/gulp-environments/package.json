{
  "name": "gulp-environments",
  "version": "0.1.2",
  "description": "A library for easily adding environments (development/production) to Gulp",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha ./index.js ./test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gunpowderlabs/gulp-environments.git"
  },
  "keywords": [
    "gulp",
    "environments"
  ],
  "author": {
    "name": "Adam Pohorecki",
    "email": "adam@gunpowderlabs.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/gunpowderlabs/gulp-environments/issues"
  },
  "homepage": "https://github.com/gunpowderlabs/gulp-environments#readme",
  "dependencies": {
    "gulp-if": "^2.0.1",
    "yargs": "^5.0.0"
  },
  "devDependencies": {
    "chai": "^3.0.0",
    "mocha": "^2.2.5"
  },
  "readme": "# gulp-environments\n\nA Gulp plug-in that makes it convenient to create separate environments, such as development and production, to run your tasks in.\n\n## Basic usage\n\nInstall the plugin using npm:\n\n    $ npm install --save-dev gulp-environments\n\nRequire the plug-in somewhere in your `gulpfile.js`\n\n    var environments = require('gulp-environments');\n\nBy default, the library defines two environments: development and production. For convenience sake, it is recommended to assign them to local variables:\n\n    var development = environments.development;\n    var production = environments.production;\n\nYou can use these environments as predicates (functions returning true/false depending on whether the given environment is active):\n\n    var source = production() ? \"source.min.js\" : \"source.js\";\n\nYou can also use the environment as a filter in you Gulp pipelines:\n\n    gulp.src(paths.js)\n      // this will only init sourcemaps in development\n      .pipe(development(sourcemaps.init()))\n      .pipe(concat(\"app.js\"))\n      // only write out sourcemaps in development\n      .pipe(development(sourcemaps.write('.')))\n      // only minify the compiled JS in production mode\n      .pipe(production(uglify()))\n      .pipe(gulp.dest(\"./public/app/js/\"));\n  \n## Setting the environment\n\nBy default, gulp-environments uses the NODE_ENV environment variable to determine environment:\n\n    NODE_ENV=development gulp build\n\nYou can also pass a command line flag --env to set it:\n\n    gulp build --env development\n\nAlternatively, you can define a task that would set the appropriate environment before executing other tasks:\n\n    gulp.task('set-dev', development.task);\n\nand run it (or make it a dependency of a task that should also be run in that environment):\n\n    gulp set-dev build\n\nFinally, you can always set the environment by hand in your task definition:\n\n    environments.current(development);\n\n## Other environments\n\nYou don't have to limit yourself to using only the two provided environments. You can create other ones by calling (in the example, we are creating an environment called staging):\n\n    var staging = environments.make(\"staging\");\n\n## License\n\nMIT\n\n## Author\n\nAdam Pohorecki\n",
  "readmeFilename": "README.md",
  "_id": "gulp-environments@0.1.2",
  "dist": {
    "shasum": "389d02802764818b01a4c1e7af099335cf044811"
  },
  "_from": "gulp-environments@^0.1.1",
  "_resolved": "https://registry.npmjs.org/gulp-environments/-/gulp-environments-0.1.2.tgz"
}
