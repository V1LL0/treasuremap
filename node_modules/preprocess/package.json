{
  "name": "preprocess",
  "description": "Preprocess directives in HTML, JavaScript, etc directives based off variable context",
  "version": "3.1.0",
  "homepage": "https://github.com/jsoverson/preprocess",
  "author": {
    "name": "Jarrod Overson",
    "email": "jsoverson@gmail.com",
    "url": "http://jarrodoverson.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jsoverson/preprocess.git"
  },
  "bugs": {
    "url": "https://github.com/jsoverson/preprocess/issues"
  },
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "https://github.com/jsoverson/preprocess/blob/master/LICENSE"
    }
  ],
  "main": "lib/preprocess.js",
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "grunt test",
    "ci": "grunt ci"
  },
  "dependencies": {
    "xregexp": "3.1.0"
  },
  "devDependencies": {
    "chai": "^3.5.0",
    "chai-spies": "^0.7.0",
    "grunt": "^0.4.5",
    "grunt-benchmark": "^0.3.0",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-clean": "^1.0.0",
    "grunt-contrib-copy": "^0.8.0",
    "grunt-contrib-jshint": "^1.0.0",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-coveralls": "^1.0.0",
    "grunt-deps-ok": "^0.9.0",
    "grunt-mocha-istanbul": "^3.0.1",
    "grunt-mocha-test": "^0.12.7",
    "istanbul": "^0.4.2",
    "load-grunt-tasks": "^3.4.0",
    "mocha": "^2.4.5",
    "time-grunt": "^1.3.0",
    "travis-cov": "^0.2.5"
  },
  "keywords": [
    "directive",
    "ENV",
    "environment",
    "ifdef",
    "ifndef",
    "echo",
    "include",
    "exclude",
    "process",
    "preprocess",
    "pragma"
  ],
  "readme": "# preprocess\n[![NPM][npm-image]][npm-url]\n\n[![Linux Build Status][linux-ci-image]][linux-ci-url] [![Windows Build Status][windows-ci-image]][windows-ci-url] [![Coverage Status][coverage-image]][coverage-url] [![dependencies][deps-image]][deps-url] [![dev-dependencies][dev-deps-image]][dev-deps-url]\n\nPreprocess HTML, JavaScript, and other files with directives based off custom or ENV configuration\n\n## Configuration\n\nInstall via npm:\n\n```bash\n$ npm install --save preprocess\n```\n\n## What does it look like?\n\n```html\n<head>\n  <title>Your App</title>\n\n  <!-- @if NODE_ENV='production' -->\n  <script src=\"some/production/lib/like/analytics.js\"></script>\n  <!-- @endif -->\n\n</head>\n<body>\n  <!-- @ifdef DEBUG -->\n  <h1>Debugging mode - <!-- @echo RELEASE_TAG --> </h1>\n  <!-- @endif -->\n  <p>\n  <!-- @include welcome_message.txt -->\n  </p>\n</body>\n```\n\n```js\nvar configValue = '/* @echo FOO */' || 'default value';\n\n// @ifdef DEBUG\nsomeDebuggingCall()\n// @endif\n\n```\n\n## Directive syntax\n\n### Basic example\n\nThe most basic usage is for files that only have two states, non-processed and processed.\nIn this case, your `@exclude` directives are removed after preprocessing\n\n```html\n<body>\n    <!-- @exclude -->\n    <header>You're on dev!</header>\n    <!-- @endexclude -->\n</body>\n```\n\nAfter build\n\n```html\n<body>\n</body>\n```\n\n### All directives\n\n - `@if VAR='value'` / `@endif`\n   This will include the enclosed block if your test passes\n - `@ifdef VAR` / `@endif`\n   This will include the enclosed block if VAR is defined (typeof !== 'undefined')\n - `@ifndef VAR` / `@endif`\n   This will include the enclosed block if VAR is not defined (typeof === 'undefined')\n - `@include`\n   This will include the source from an external file. If the included source ends with a newline then the\n   following line will be space indented to the level the @include was found.\n - `@include-static`\n   Works the same way as `@include` but doesn't process the included file recursively. Is useful if a large\n   file has to be included and the recursive processing is not necessary or would otherwise take too long.\n - `@extend file.html` / `@endextend`\n   This will use the source from the external file indicated with the `@extend` tag to wrap the enclosed block.\n - `@extendable`\n   This tag is used to indicate the location in a file referenced using `@extend` where the block enclosed by `@extend` will be populated.\n - `@exclude` / `@endexclude`\n   This will remove the enclosed block upon processing\n - `@echo VAR`\n   This will include the environment variable VAR into your source\n - `@foreach $VAR in ARR` / `@endfor`\n   This will repeat the enclosed block for each value in the Array or Object in ARR. Each value in ARR can be interpolated into the resulting content with $VAR.\n - `@exec FUNCTION([param1, param2...])`\n   This will execute the environment FUNCTION with its parameters and echo the result into your source. The parameter\n   could be a string or a reference to another environment variable.\n\n### Extended html Syntax\n\nThis is useful for more fine grained control of your files over multiple\nenvironment configurations. You have access to simple tests of any variable within the context (or ENV, if not supplied)\n\n```html\n<body>\n    <!-- @if NODE_ENV!='production' -->\n    <header>You're on dev!</header>\n    <!-- @endif -->\n\n    <!-- @if NODE_ENV='production' -->\n    <script src=\"some/production/javascript.js\"></script>\n    <!-- @endif -->\n\n    <script>\n    var fingerprint = '<!-- @echo COMMIT_HASH -->' || 'DEFAULT';\n    </script>\n\n    <script src=\"<!-- @exec static_path('another/production/javascript.js') -->\"></script>\n</body>\n```\n\nWith a `NODE_ENV` set to `production` and `0xDEADBEEF` in\n`COMMIT_HASH` this will be built to look like\n\n```html\n<body>\n    <script src=\"some/production/javascript.js\"></script>\n\n    <script>\n    var fingerprint = '0xDEADBEEF' || 'DEFAULT';\n    </script>\n\n    <script src=\"http://cdn2.my.domain.com/another/javascript.js\"></script>\n</body>\n```\n\nWith NODE_ENV not set or set to dev and nothing in COMMIT_HASH,\nthe built file will be\n\n```html\n<body>\n    <header>You're on dev!</header>\n\n    <script>\n    var fingerprint = '' || 'DEFAULT';\n    </script>\n\n    <script src=\"http://localhost/myapp/statics/another/javascript.js\"></script>\n</body>\n```\n\nYou can also have conditional blocks that are hidden by default by using the\nfictional `!>` end tag instead of `-->` after your condition:\n\n```html\n<!-- @if true !>\n<p>Process was run!</p>\n<!-- @endif -->\n```\n\n### JavaScript, CSS, C, Java Syntax\n\nExtended syntax below, but will work without specifying a test\n\n```js\nnormalFunction();\n//@exclude\nsuperExpensiveDebugFunction()\n//@endexclude\n\nanotherFunction('/* @echo USERNAME */');\n```\n\nBuilt with a NODE_ENV of production :\n\n```js\nnormalFunction();\n\nanotherFunction('jsoverson');\n```\n\nLike HTML, you can have conditional blocks that are hidden by default by ending the directive with a `**` instead of `*/`\n\n```js\nangular.module('myModule', ['dep1'\n    , 'dep2'\n    /* @if NODE_ENV='production' **\n    , 'prod_dep'\n    /* @endif */\n    /* @exclude **\n    , 'debug_dep'\n    /* @endexclude */\n]);\n\n```\n\n_Note: Hidden by default blocks only work with block comments (`/* */`) but not with line comments (`//`)._\n\nCSS example\n\n```css\nbody {\n/* @if NODE_ENV=='development' */\n  background-color: red;\n/* @endif */\n\n}\n// @include util.css\n```\n\n(CSS preprocessing supports single line comment style directives)\n\n\n\n### Shell, PHP\n\n```bash\n#!/bin/bash\n\n# @include util.sh\n```\n\n## API\n\n### preprocess(source[, context[, options]]) -> preprocessedSource\n\nPreprocesses a source provided as a string and returns the preprocessed source.\n\n#### source\nType: `String` (mandatory)\n\nThe source to preprocess.\n\n#### context\nType: `Object`\nDefault: `process.env`\n\nThe context that contains the variables that are used in the source. For `@extend` variants and `@include` the additional\ncontext property `src` is available inside of files to be included that contains the current file name. This property is also\navailable in the context of the source file if one of the `preprocessFile*()` API variants are used.\n\n#### options\nType: `Object`\n\nThe options object allows to pass additional options to `preprocess`. Available options are:\n\n##### options.fileNotFoundSilentFail\nType: `Boolean`\nDefault: `false`\n\nWhen using `@include` variants and `@extend`, `preprocess` will by default throw an exception in case an included\nfile can't be found. Set this option to `true` to instruct `preprocess` to fail silently and instead of throwing\nto write a message inside of the preprocessed file that an included file could not be found.\n\n##### options.srcDir\nType: `String`\nDefault: `process.cwd()`\n\nThe directory where to look for files included via `@include` variants and `@extend`.\n\n##### options.srcEol\nType: `String`\nDefault: EOL of source string or `os.EOL` if source string contains multiple different or no EOLs.\n\nThe end of line (EOL) character to use for the preprocessed result. May be one of:\n - `\\r\\n` - Windows\n - `\\n` - Linux/OSX/Unix\n - `\\r` - legacy Mac\n\n##### options.type\nType: `String`\nDefault: `html`\n\nThe syntax type of source string to preprocess. There are 3 main syntax variants:\n - `html`, aliases: `xml`\n - `js`, aliases: `javascript`, `jsx`, `c`, `cc`, `cpp`, `cs`, `csharp`, `java`, `less`, `sass`, `scss`, `css`, `php`,\n   `ts`, `tsx`, `peg`, `pegjs`, `jade`, `styl`\n - `coffee`, aliases: `bash`, `shell`, `sh`\n\n### preprocessFile(srcFile, destFile[, context[, callback[, options]]])\n\nPreprocesses a `sourceFile` and saves the result to `destFile`. Simple wrapper around `fs.readFile()` and `fs.writeFile()`.\n\n#### srcFile\nType: `String` (mandatory)\n\nThe path to the source file to preprocess.\n\n#### destFile\nType: `String` (mandatory)\n\nThe path to the destination file where the preprocessed result shall be saved.\n\n#### context\nSee `context` [attribute description](#context) of `preprocess()` function.\n\n#### callback\nType: `function(err)`\n\nThe callback function that is called upon error or completion. Receives an error if something goes wrong as first parameter.\n\n#### options\nSee `options` [attribute description](#options) of `preprocess()` function. Differs only in that the default `srcDir` value is set\nto the path of the provided source file instead of `process.cwd()` and the default `type` is derived from source file extension.\n\n\n### preprocessFileSync(srcFile, destFile[, context[, options]])\n\nPreprocesses a `sourceFile` and saves the result to `destFile`. Simple wrapper around `fs.readFileSync()` and `fs.writeFileSync()`.\n\n#### srcFile\nType: `String` (mandatory)\n\nThe path to the source file to preprocess.\n\n#### destFile\nType: `String` (mandatory)\n\nThe path to the destination file where the preprocessed result shall be saved.\n\n#### context\nSee `context` [attribute description](#context) of `preprocess()` function.\n\n#### options\nSee `options` [attribute description](#options) of `preprocess()` function. Differs only in that the default `srcDir` value is set\nto the path of the provided source file instead of `process.cwd()` and the default `type` is derived from source file extension.\n\n## Usage Examples\n\n```js\nvar pp = require('preprocess');\n\nvar text = 'Hi, I am <!-- @echo USERNAME -->';\n\npp.preprocess(text);\n// -> Hi, I am jsoverson\n\npp.preprocess(text, {USERNAME : \"Bob\"});\n// -> Hi, I am Bob\n\n// specify the format to use for the directives as the third parameter\npp.preprocess(text, {USERNAME : \"Bob\"}, {type: 'html'});\n// -> Hi, I am Bob\n\n// Preprocess files asynchronously\npp.preprocessFile(src, dest, context, callback, options);\n\n// Preprocess files synchronously\npp.preprocessFileSync(src, dest, context, options);\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or\nchanged functionality. Lint and test your code using jshint\n\n## Release History\n - 3.1.0\n    - Added `.jsx` file extension as an alias for `js` (@BendingBender, #79)\n    - Added `.tsx` file extension as an alias for `js` (@rosendi, #100)\n    - Bumped XRegExp to v3\n\n - 3.0.1/2 Fixes for backward compatibility and regex cleanups (thanks to @anseki for suggestions, #77)\n - 3.0.0\n\n   Breaking changes:\n   - If a file requested by `@include` or `@extend` can not be found, `preprocess` will now throw by default\n     with a possibility to opt in to the legacy behavior via the `fileNotFoundSilentFail` option (@BendingBender, #35).\n   - Fixed multiple issues with newlines (@BendingBender, #8), this may result in output that differs from earlier\n     versions.\n   - The `srcDir` option was moved to the options object and now defaults to `process.cwd` instead of throwing by\n     default (@BendingBender, #68)\n\n   New functionality:\n   - All block directives (ones that have a start and an end token, like `@if`/`@endif`) are now processed recursively (@Frizi, #61)\n   - Added hidden by default configuration blocks for `js` (@mallowigi, #40) and `html` (@Frizi, #66)\n\n   Fixes:\n   - fixed `@exec` in files included via `@include` and `@extend` (@BendingBender, #58)\n   - changed `@extend` and `@exclude` html regex so that directives may appear more than once in one line (@BendingBender, #36)\n   - fixed multiple issues with coffescript syntax (@BendingBender, #39)\n   - fixed `@if` and `@foreach` to not require trailing whitespace (@BendingBender, #74)\n\n - 2.3.1 Fixed @echo and @exec directives to allow `-` and `*` characters, fixed @exec with multiple params (@BendingBender, #21, #45, #51, #54).\n - 2.3.0 Added support for @include-static (@BendingBender)\n - 2.2.0 Added support for @foreach and @extend (@orionstein)\n - 2.1.1 Added support for .styl files via js regex (@nsonnad)\n - 2.1.0 Added automatic support for numerous formats, merged @exec, hidden by default html tags, added simple directives\n - 2.0.0 Added ability to echo strings, added conditional comments, removed lodash, merged 17, 13, 15, 16\n - 1.2.0 Added processing for hash-style comments (@marsch). Added more file aliases.\n - 1.1.0 Added deep inclusion, fixed sequential ifs\n - 1.0.1 Fixed multiple inline echo statements\n - 1.0.0 Pulled from grunt-preprocess to stand alone\n\n## License\n\nCopyright Jarrod Overson\n\nWritten by Jarrod Overson\n\nLicensed under the Apache 2.0 license.\n\n[npm-image]: https://nodei.co/npm/preprocess.png?downloads=true\n[npm-url]: https://www.npmjs.com/package/preprocess\n[linux-ci-image]: https://img.shields.io/travis/jsoverson/preprocess/master.svg?style=flat-square&label=Linux%20build\n[linux-ci-url]: https://travis-ci.org/jsoverson/preprocess\n[windows-ci-image]: https://img.shields.io/appveyor/ci/BendingBender/preprocess/master.svg?style=flat-square&label=Windows%20build\n[windows-ci-url]: https://ci.appveyor.com/project/BendingBender/preprocess\n[deps-image]: https://img.shields.io/david/jsoverson/preprocess.svg?style=flat-square\n[deps-url]: https://david-dm.org/jsoverson/preprocess\n[dev-deps-image]: https://img.shields.io/david/dev/jsoverson/preprocess.svg?style=flat-square\n[dev-deps-url]: https://david-dm.org/jsoverson/preprocess#info=devDependencies\n[coverage-image]: https://img.shields.io/coveralls/jsoverson/preprocess/master.svg?style=flat-square\n[coverage-url]: https://coveralls.io/r/jsoverson/preprocess?branch=master\n",
  "readmeFilename": "README.md",
  "_id": "preprocess@3.1.0",
  "_from": "preprocess@^3.0.2"
}
